
{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "description": "User's last name."
        },
        "phone": {
          "type": "string",
          "description": "User's phone number."
        },
        "role": {
          "type": "string",
          "description": "The user's role within the organization (e.g., Chairperson, Treasurer, Coordinator, Investment Lead, Member)."
        },
        "photoURL": {
          "type": [
            "string",
            "null"
          ],
          "description": "URL of the user's profile picture."
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "phone"
      ]
    },
    "FinancialYear": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinancialYear",
      "type": "object",
      "description": "Represents a financial year for tracking contributions.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the financial year."
        },
        "year": {
          "type": "number",
          "description": "The financial year (e.g., 2025)."
        },
        "startDate": {
          "type": "string",
          "description": "The starting date of the financial year.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The ending date of the financial year.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "year",
        "startDate",
        "endDate"
      ]
    },
    "Contribution": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contribution",
      "type": "object",
      "description": "Represents a member's monthly contribution.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contribution record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Contribution)"
        },
        "financialYearId": {
          "type": "string",
          "description": "Reference to FinancialYear. (Relationship: FinancialYear 1:N Contribution)"
        },
        "month": {
          "type": "number",
          "description": "The month of the contribution (1-12)."
        },
        "amount": {
          "type": "number",
          "description": "The contribution amount for the month."
        }
      },
      "required": [
        "id",
        "userId",
        "financialYearId",
        "month",
        "amount"
      ]
    },
    "SpecialContribution": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SpecialContribution",
      "type": "object",
      "description": "Represents a member's special contribution, like a miniharambee.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the special contribution record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N SpecialContribution)"
        },
        "financialYearId": {
          "type": "string",
          "description": "Reference to FinancialYear. (Relationship: FinancialYear 1:N SpecialContribution)"
        },
        "date": {
          "type": "string",
          "description": "The date of the special contribution.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "The special contribution amount."
        },
        "month": {
          "type": "number",
          "description": "The month of the special contribution (0-11)."
        },
        "year": {
          "type": "number",
          "description": "The year of the special contribution."
        }
      },
      "required": [
        "id",
        "userId",
        "financialYearId",
        "date",
        "amount"
      ]
    },
    "Event": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Event",
      "type": "object",
      "description": "Represents an event created by the coordinator.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the event."
        },
        "date": {
          "type": "string",
          "description": "The date and time of the event.",
          "format": "date-time"
        },
        "location": {
          "type": "string",
          "description": "The location of the event."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "date",
        "location"
      ]
    },
    "Constitution": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Constitution",
      "type": "object",
      "description": "Represents the group's constitution document.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the constitution document."
        },
        "title": {
          "type": "string",
          "description": "The title of the constitution."
        },
        "content": {
          "type": "string",
          "description": "The content of the constitution document (can be stored as text or a link to cloud storage)."
        },
        "uploadDate": {
          "type": "string",
          "description": "The date when the constitution was uploaded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "content",
        "uploadDate"
      ]
    },
    "InvestmentReport": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InvestmentReport",
      "type": "object",
      "description": "Represents a report on investments done by the group.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the investment report."
        },
        "title": {
          "type": "string",
          "description": "The title of the investment report."
        },
        "content": {
          "type": "string",
          "description": "The content of the investment report (can be stored as text or a link to cloud storage)."
        },
        "uploadDate": {
          "type": "string",
          "description": "The date when the investment report was uploaded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "content",
        "uploadDate"
      ]
    },
    "Poll": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Poll",
      "type": "object",
      "description": "Represents a poll created by the chairperson.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the poll."
        },
        "question": {
          "type": "string",
          "description": "The poll question."
        },
        "options": {
          "type": "array",
          "description": "The options for the poll.",
          "items": {
            "type": "string"
          }
        },
        "startDate": {
          "type": "string",
          "description": "The date and time when the poll starts.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The date and time when the poll ends.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "question",
        "options",
        "startDate",
        "endDate"
      ]
    },
    "Vote": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Vote",
      "type": "object",
      "description": "Represents a user's vote in a poll.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the vote."
        },
        "pollId": {
          "type": "string",
          "description": "Reference to Poll. (Relationship: Poll 1:N Vote)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Vote)"
        },
        "selectedOption": {
          "type": "string",
          "description": "The option selected by the user."
        },
        "voteDate": {
          "type": "string",
          "description": "The date and time when the vote was cast.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "pollId",
        "userId",
        "selectedOption",
        "voteDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "rules": "rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // === Helper Functions ===\n\n    function isSignedIn() {\n      return request.auth != null;\n    }\n\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    function isExistingOwner(userId) {\n      return isSignedIn() && isOwner(userId) && exists(/databases/$(database)/documents/userProfiles/$(userId));\n    }\n\n    function isChairperson() {\n      return get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'Chairperson';\n    }\n\n    function isCoordinator() {\n      return get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'Coordinator';\n    }\n\n    function isInvestmentLead() {\n      return get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'Investment Lead';\n    }\n    \n    function isTreasurer() {\n      return get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'Treasurer';\n    }\n\n    function isAdmin() {\n      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));\n    }\n\n    // === Roles Admin Collection ===\n    match /roles_admin/{userId} {\n      allow get: if isSignedIn() && isAdmin();\n      allow list: if false;\n      allow create: if isSignedIn() && request.auth.uid == userId;\n      allow update: if false;\n      allow delete: if false;\n    }\n\n    // === User Profiles ===\n    match /userProfiles/{userId} {\n      allow get: if isSignedIn() && (isOwner(userId) || isTreasurer() || isAdmin());\n      allow list: if isSignedIn() && (isAdmin() || isTreasurer());\n      allow create: if isSignedIn() && isOwner(userId);\n\n      allow update: if isSignedIn() && isOwner(userId) &&\n                    !((\"role\" in request.resource.data) && \n                      request.resource.data.role != resource.data.role);\n\n      allow update: if isSignedIn() && isAdmin();\n      allow delete: if isExistingOwner(userId);\n    }\n\n    // === Financial Years ===\n    match /financialYears/{financialYearId} {\n      allow get, list: if isSignedIn();\n      allow create, update: if isSignedIn() && (isChairperson() || isTreasurer());\n      allow delete: if false;\n    }\n\n    // === User Contributions ===\n    match /userProfiles/{userId}/contributions/{contributionId} {\n      allow get, list: if isSignedIn() && (isOwner(userId) || isTreasurer());\n      allow create, update: if isSignedIn() && (request.auth.uid == userId || isTreasurer());\n      allow delete: if isExistingOwner(userId);\n    }\n\n    // === Special Contributions ===\n    match /userProfiles/{userId}/specialContributions/{specialContributionId} {\n      allow get, list: if isSignedIn() && (isOwner(userId) || isTreasurer());\n      allow create, update, delete: if isSignedIn() && isTreasurer();\n    }\n\n    // === Special Contributions (Collection Group) ===\n    match /{path=**}/specialContributions/{specialContributionId} {\n      allow list: if isSignedIn() && isTreasurer();\n    }\n\n    // === Events ===\n    match /events/{eventId} {\n      allow get, list: if isSignedIn();\n      allow create, update: if isSignedIn() && isCoordinator();\n      allow delete: if false;\n    }\n\n    // === Constitution ===\n    match /constitution/{constitutionId} {\n      allow get, list: if isSignedIn();\n      allow create, update: if isSignedIn() && isChairperson();\n      allow delete: if false;\n    }\n\n    // === Investment Reports ===\n    match /investmentReports/{investmentReportId} {\n      allow get, list: if isSignedIn();\n      allow create, update: if isSignedIn() && isInvestmentLead();\n      allow delete: if false;\n    }\n\n    // === Polls ===\n    match /polls/{pollId} {\n      allow get, list: if isSignedIn();\n      allow create, update: if isSignedIn() && isChairperson();\n      allow delete: if false;\n    }\n\n    // === Votes ===\n    match /polls/{pollId}/votes/{voteId} {\n      allow get: if isSignedIn();\n      allow list: if false;\n      allow create: if isSignedIn() && request.auth.uid == resource.data.userId;\n      allow update, delete: if isSignedIn() && isOwner(resource.data.userId);\n    }\n  }\n}\n",
    "structure": [
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "adminRole",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Documents in this collection indicate admin status. Existence of a document for a given userId grants admin privileges.",
          "rules": "allow get: if isSignedIn() && isAdmin();\nallow list: if false;\nallow create: if isSignedIn() && request.auth.uid == userId;\nallow update: if false;\nallow delete: if false;",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/userProfiles/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Path based ownership simplifies security rules.",
          "rules": "allow get: if isSignedIn() && (isOwner(userId) || isTreasurer() || isAdmin());\nallow list: if isSignedIn() && (isAdmin() || isTreasurer());\nallow create: if isSignedIn() && isOwner(userId);\nallow update: if (isSignedIn() && isOwner(userId) && !('role' in request.resource.data && request.resource.data.role != resource.data.role)) || (isSignedIn() && isAdmin());\nallow delete: if isExistingOwner(userId);",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user. This ID is used as the document ID."
            }
          ]
        }
      },
      {
        "path": "/financialYears/{financialYearId}",
        "definition": {
          "entityName": "FinancialYear",
          "schema": {
            "$ref": "#/backend/entities/FinancialYear"
          },
          "description": "Stores financial year information. Accessible to all members but create/update restricted to Chairperson.",
          "rules": "allow get, list: if isSignedIn();\nallow create, update: if isSignedIn() && (isChairperson() || isTreasurer());\nallow delete: if false;",
          "params": [
            {
              "name": "financialYearId",
              "description": "Unique ID for the financial year document."
            }
          ]
        }
      },
      {
        "path": "/userProfiles/{userId}/contributions/{contributionId}",
        "definition": {
          "entityName": "Contribution",
          "schema": {
            "$ref": "#/backend/entities/Contribution"
          },
          "description": "Stores contribution records for each user. Members can see their own, Treasurers can manage all.",
          "rules": "allow get, list: if isSignedIn() && (isOwner(userId) || isTreasurer());\nallow create, update: if isSignedIn() && (request.auth.uid == userId || isTreasurer());\nallow delete: if isExistingOwner(userId);",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who made the contribution."
            },
            {
              "name": "contributionId",
              "description": "Unique ID for the contribution record."
            }
          ]
        }
      },
      {
        "path": "/userProfiles/{userId}/specialContributions/{specialContributionId}",
        "definition": {
          "entityName": "SpecialContribution",
          "schema": {
            "$ref": "#/backend/entities/SpecialContribution"
          },
          "description": "Stores special contribution records for each user (e.g., miniharambees). Only treasurers can create/update/delete.",
          "rules": "allow get, list: if isSignedIn() && (isOwner(userId) || isTreasurer());\nallow create, update, delete: if isSignedIn() && isTreasurer();",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who made the special contribution."
            },
            {
              "name": "specialContributionId",
              "description": "Unique ID for the special contribution record."
            }
          ]
        }
      },
       {
        "path": "/{path=**}/specialContributions/{specialContributionId}",
        "definition": {
          "entityName": "SpecialContribution",
          "schema": {
            "$ref": "#/backend/entities/SpecialContribution"
          },
          "description": "Allows collection group queries on specialContributions for Treasurers.",
          "rules": "allow list: if isSignedIn() && isTreasurer();",
           "params": [
            {
              "name": "path",
              "description": "Wildcard for the path."
            },
            {
              "name": "specialContributionId",
              "description": "Unique ID for the special contribution record."
            }
          ]
        }
      },
      {
        "path": "/events/{eventId}",
        "definition": {
          "entityName": "Event",
          "schema": {
            "$ref": "#/backend/entities/Event"
          },
          "description": "Stores event information. Create/update restricted to Coordinator.",
          "rules": "allow get, list: if isSignedIn();\nallow create, update: if isSignedIn() && isCoordinator();\nallow delete: if false;",
          "params": [
            {
              "name": "eventId",
              "description": "Unique ID for the event document."
            }
          ]
        }
      },
      {
        "path": "/constitution/{constitutionId}",
        "definition": {
          "entityName": "Constitution",
          "schema": {
            "$ref": "#/backend/entities/Constitution"
          },
          "description": "Stores the group's constitution document.  Create/update restricted to Chairperson.",
          "rules": "allow get, list: if isSignedIn();\nallow create, update: if isSignedIn() && isChairperson();\nallow delete: if false;",
          "params": [
            {
              "name": "constitutionId",
              "description": "Unique ID for the constitution document."
            }
          ]
        }
      },
      {
        "path": "/investmentReports/{investmentReportId}",
        "definition": {
          "entityName": "InvestmentReport",
          "schema": {
            "$ref": "#/backend/entities/InvestmentReport"
          },
          "description": "Stores investment reports. Create/update restricted to Investment Lead.",
          "rules": "allow get, list: if isSignedIn();\nallow create, update: if isSignedIn() && isInvestmentLead();\nallow delete: if false;",
          "params": [
            {
              "name": "investmentReportId",
              "description": "Unique ID for the investment report document."
            }
          ]
        }
      },
      {
        "path": "/polls/{pollId}",
        "definition": {
          "entityName": "Poll",
          "schema": {
            "$ref": "#/backend/entities/Poll"
          },
          "description": "Stores poll information. Create/update restricted to Chairperson.",
          "rules": "allow get, list: if isSignedIn();\nallow create, update: if isSignedIn() && isChairperson();\nallow delete: if false;",
          "params": [
            {
              "name": "pollId",
              "description": "Unique ID for the poll document."
            }
          ],
          "subcollections": [
            {
              "path": "/polls/{pollId}/votes/{voteId}",
              "definition": {
                "entityName": "Vote",
                "schema": {
                  "$ref": "#/backend/entities/Vote"
                },
                "description": "Stores votes for each poll. Each user can only vote once per poll. Path based ownership ensures only the user can modify or delete their vote.",
                "rules": "allow get: if isSignedIn();\nallow list: if false;\nallow create: if isSignedIn() && request.auth.uid == resource.data.userId;\nallow update, delete: if isSignedIn() && isOwner(resource.data.userId);",
                "params": [
                  {
                    "name": "pollId",
                    "description": "Reference ID for the poll document."
                  },
                  {
                    "name": "voteId",
                    "description": "Unique ID for the vote document."
                  }
                ]
              }
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to manage user profiles, financial years, contributions, special contributions, events, constitution, investment reports, polls, and votes for EmpowerHub. User roles (Admin, Chairperson, Treasurer, Coordinator, Secretary, Investment Lead, Member) are managed via role-based access control rules defined for each collection. This ensures that only authorized users can perform specific actions (e.g., only a Treasurer can update contributions, only an Admin can manage users). A collection group query rule has been added for 'specialContributions' to allow Treasurers to list all of them across all users. This design adheres to the principles of Authorization Independence, Clarity of Intent, and least privilege."
  }
}

    